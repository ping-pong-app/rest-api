{
    "openapi": "3.0.1",
    "info": {
        "title": "Ping API",
        "description": "API for Ping application",
        "contact": {
            "name": "Miha Jamsek",
            "url": "https://github.com/Jamsek-m"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:3000/v1",
            "description": "Local development environment"
        },
        {
            "url": "https://test.mjamsek.com/v1",
            "description": "Stage testing environment"
        }
    ],
    "security": [
        {
            "Firebase": []
        }
    ],
    "paths": {
        "/groups": {
            "get": {
                "tags": [
                    "group"
                ],
                "summary": "Returns list of groups",
                "description": "Retrieves paginated list of groups.",
                "operationId": "getAllGroups",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns list",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Count of all entities",
                                "schema": {
                                    "type": "number"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    },
                                    "example": [
                                        {
                                            "id": "abcde123",
                                            "name": "Test group",
                                            "ownerId": "klmnop456"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "group"
                ],
                "summary": "Creates group",
                "description": "Creates group with caller set as owner and member.",
                "operationId": "createGroup",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Group"
                            },
                            "example": {
                                "name": "Test group",
                                "ownerId": "abcde123"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Group created",
                        "headers": {
                            "Location": {
                                "description": "Path to created group",
                                "schema": {
                                    "type": "string"
                                },
                                "example": "/v1/groups/abcde123"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdentifier"
                                },
                                "example": {
                                    "id": "abcde123"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                },
                                "example": {
                                    "status": "422",
                                    "name": "ValidationError",
                                    "message": "Field must not be blank!",
                                    "entity": "Group",
                                    "fieldName": "name"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/groups/{id}/invites": {
            "get": {
                "tags": [
                    "group"
                ],
                "summary": "Returns group's invites",
                "description": "Returns all invitations to group with given id",
                "operationId": "getGroupInvites",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcde123"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns group's invites",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Count of all entities",
                                "schema": {
                                    "type": "number"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Invitation"
                                    },
                                    "example": [
                                        {
                                            "id": "abcde123",
                                            "groupId": "klmnop456",
                                            "userId": "rstuvw789"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/groups/{id}/members": {
            "get": {
                "tags": [
                    "group"
                ],
                "summary": "Get group members",
                "description": "Returns list of members belonging to group with given id. Retrieves additional data from Firebase Authentication",
                "operationId": "getGroupMembers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of group members",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Count of members",
                                "schema": {
                                    "type": "number"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupMembership"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/groups/{id}/leave": {
            "delete": {
                "tags": ["group"],
                "summary": "Leave group",
                "description": "Removes user from the group",
                "operationId": "leaveGroup",
                "responses": {
                    "204": {
                        "description": "User left the group"
                    },
                    "400": {
                        "description": "Invalid call - most common due to the user leaving being also group owner",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/groups/{id}": {
            "get": {
                "tags": [
                    "group"
                ],
                "summary": "Returns group",
                "description": "Retrieves group with given id",
                "operationId": "getGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "group"
                ],
                "summary": "Deletes group",
                "description": "Deletes group with given id",
                "operationId": "deleteGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Group deleted"
                    },
                    "404": {
                        "description": "Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ping": {
            "post": {
                "tags": [
                    "ping"
                ],
                "summary": "Pings all users in group",
                "description": "Sends push notification to all group members.",
                "operationId": "ping",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Ping"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Group was pinged."
                    },
                    "404": {
                        "description": "Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites": {
            "get": {
                "tags": [
                    "invites"
                ],
                "summary": "Get user invitations",
                "description": "Returns all invitations belonging to the caller",
                "operationId": "getUserInvites",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Invitation"
                            }
                        }
                    }
                },
                "responses": {
                    "200":{
                        "description": "Returns user's invitations",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Count of all invitations",
                                "schema": {
                                    "type": "number"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Invitation"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "invites"
                ],
                "summary": "Invite user",
                "description": "Invites user to group with given id",
                "operationId": "inviteUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Invitation"
                            },
                            "example": {
                                "email": "john.doe@mail.com",
                                "groupId": "abcde123"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User was invited to the group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdentifier"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Invitation for the user already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites/{id}/accept": {
            "post": {
                "tags": [
                    "invites"
                ],
                "summary": "Accepts invitation",
                "description": "Accepts invitation to the group.",
                "operationId": "acceptInvite",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invitation accepted"
                    },
                    "404": {
                        "description": "Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites/{id}/reject": {
            "delete": {
                "tags": [
                    "invites"
                ],
                "summary": "Rejects invitation",
                "description": "Rejects invitation to the group.",
                "operationId": "rejectInvite",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invitation rejected"
                    },
                    "404": {
                        "description": "Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites/{id}/cancel": {
            "delete": {
                "tags": [
                    "invites"
                ],
                "summary": "Cancels invitation",
                "description": "Cancels invitation to the group.",
                "operationId": "cancelInvite",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invitation cancelled"
                    },
                    "404": {
                        "description": "Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "tags": [
                    "health"
                ],
                "summary": "Liveness check",
                "description": "Endpoint for liveness check",
                "operationId": "livenessHealth",
                "servers": [
                    {
                        "url": "http://localhost:3000",
                        "description": "Local development environment"
                    },
                    {
                        "url": "https://test.mjamsek.com",
                        "description": "Stage testing environment"
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Service is live",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthcheckReport"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Service is not live",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthcheckReport"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "tags": [
                    "health"
                ],
                "summary": "Readiness check",
                "description": "Endpoint for readiness check",
                "operationId": "readinessHealth",
                "servers": [
                    {
                        "url": "http://localhost:3000",
                        "description": "Local development environment"
                    },
                    {
                        "url": "https://test.mjamsek.com",
                        "description": "Stage testing environment"
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthcheckReport"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Service is not ready",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthcheckReport"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "Firebase": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization"
            }
        },
        "schemas": {
            "EntityIdentifier": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": false
                    }
                }
            },
            "Group": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "nullable": false
                    },
                    "ownerId": {
                        "type": "string"
                    }
                }
            },
            "GroupMembership": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "photo": {
                        "type": "string"
                    }
                }
            },
            "Invitation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string",
                        "nullable": true
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "Ping": {
                "type": "object",
                "properties": {
                    "groupId": {
                        "type": "string"
                    }
                }
            },
            "HealthCheck": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "UP",
                            "DOWN"
                        ]
                    }
                }
            },
            "HealthcheckReport": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "UP",
                            "DOWN"
                        ]
                    },
                    "checks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HealthCheck"
                        }
                    }
                }
            },
            "Error": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number"
                    },
                    "name": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "ValidationError": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Error"
                    }
                ],
                "properties": {
                    "entity": {
                        "type": "string"
                    },
                    "fieldName": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
